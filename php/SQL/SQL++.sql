------------------------------
-- SQL не чувствителен к регистру, поэтому не важно большими или маленькими буквами написаны команды или именна баз данных
-- пишите как вам удобно;

-- Все переносы на новую строку поставлены для удобства, вы можете ставить как вам удобно,
-- можете вообще не ставить и писать в одну строку, ошибки не будет.

-- операторы || (или), $$ (и) лучше заминить на операторы SQL, так как они могут работать не корректно
-- || = OR, $$ = AND;
-------------------------------

CREATE DATABASE shop; -- создание базы данных (пустой)

DROP DATABASE shop; -- удаление базы данных

=================================
-- создание таблицы в базе данных c полями id, name, text, date
=================================

------------------------------
-- для того что бы создавать таблицы в определенной базе данных, 
-- нужно нажать на базу данных и в ней открыть вкладку 'SQL'
-------------------------------

CREATE TABLE users (
    -- NOT NULL - значит что поле не может быть пустым
    -- AUTO_INCREMENT - при добавлении новой записи, число в этой колонке будет автоматически увеличиваться на 1
        -- DEFAULT - задает значение по умолчанию, требует дополнительный парамметр указывающий на значение по умолчанию
        -- CURRENT_TIMESTAMP - значение по умолчанию, хранит в себе текущую дату и время

    id int NOT NULL AUTO_INCREMENT, -- int это тип данных которые будут поподать в колонку id. В данном случае это числа
    name varchar(20), -- varchar значит что это будет текст. (20) значит что поле не может принимать больше 20 символов
    text text, -- text это varchar с максимальным количиством символов. Может содержать чуть более 64 000 символов, отлично подходит для статей или описаний чего либо
    date DATE, -- DATE поле содержащие дату, можно изменить зайдя в редактирование
    date_time DATETIME DEFAULT CURRENT_TIMESTAMP -- DATETIME указывает на то что поле будет хранить в себе дату и время

    PRIMARY KEY(id) -- говорит что в поле id не может быть двух одинаковых записей
    FOREIGN
);

DROP TABLE users; -- удаление таблицы

===============================
-- добавление столбца в таблицу
===============================

ALTER TABLE users ADD password varchar(32); -- добавляем колонку password в таблицу users с максимальной длиной 32 символа 
-- (если пароль хешируеться (походу кодируеться, но это не точно. Если ты знаешь точное значение этого слова, подставь описание в эти скобки) у него длина будет 32 символа)

=======================================
-- добавление значений в базу данных, в поля name, text, date (id задаеться автоматически)
=======================================

---------------------------------
-- для добавления значений в таблицу нужно выбрать базу данных, затем выбрать нужную таблицу
-- после чего нажать на SQL
---------------------------------

INSERT INTO users (name, text, date) -- указываем столбцы нашей таблицы, id не прописываем, так как оно автоматически увеличеться на 1 (работаем с таблицей созданой выше)
VALUES('jon', 'меня зовут jon и т. д. и т. д.', '2021-02-18') -- указываем значение наших столбцов, значение должно соответствовать месту столбца;


-- вы также можете добавить поле указав не все поля таблички, а только нужные.
-- Если у пропущеных полей не стоит команда NOT NULL, код сработает. id добавляеться автомотически, поэтому все норм
INSERT INTO users (name)
VALUES('bob')

-- так же мы можем добавить сразу несколько записей
INSERT INTO users (name, text, date)
VALUES -- поставил перенос для удобства, вы можете писать как угодно, хоть в одну строку
('jon', 'меня зовут jon и т. д. и т. д.', '2021-02-18'), -- не забываем про запятую
('Гриша', 'меня зовут Гриша и т. д. и т. д.', '2012-05-16'),
('Александр', 'меня зовут Александр и т. д. и т. д.', '2025-12-17'),
('Сабина', 'меня зовут Сабина и т. д. и т. д.', '2027-02-01'); -- в конце точка с запятой

---------------------------------------
-- есть более простой способ добавить значение в базу данных (если вы вставляете значения вручную),
-- для этого нажмите вкладку вставить (не забудьте выбрать нужную таблицу в базе данных с которой работаете)
---------------------------------------

===============================================
-- меняем значение в определенной записи столбца в таблице
===============================================

ALTER TABLE users CHANGE date date DATE NOT NULL 
-- мы написали 2 раза имя столбца, это значит что его имя остаеться прежним
-- так же указали тип (остался прежним), и присвоили ему NOT NULL, 
-- указав что при добавлении это поле не может быть пустым

================================================
-- обновление данных в конкретной записи таблицы
================================================

-- косые кавычки поставлины для красоты, можете их не ставить,
-- но код написаный с кавычками, знак вашей професиональности (по стандартам ставяться).
-- в поле name кавычки обязательны (может быть ошибка)
UPDATE `users` SET `name` = 'bob' 
WHERE id = 5; -- меняем имя в поле с id 5 на 'bob';

--так же мы можем поменять значения сразу в нескольких полях
UPDATE users SET `name` = 'Иван', date = '2013-05-20'
WHERE name = 'jon'; -- здесь мы меняем все записи где name = jon 

-- более точная проверка
UPDATE users SET `date` = '2084-03-25' 
WHERE name = 'jon' AND id = 3; -- здесь мы меняем конкретную запись с значением именем "jon" и id 3;

=========================================
-- удаление записи из таблицы базы данных
=========================================

DELETE FROM users 
WHERE id = 2; -- удаляем запись с id 2;
-- мы можем задать любую проверку на пример id > 4 (все записи у которых id больше 4 будут удалены);

DELETE FROM users; -- удаление всех записей из таблицы users;

TRUNCATE users; -- команда которая удаляет все записи из таблицы
-- тоже самое что и 'DELETE FROM users;'

-----------------------------------
-- Вы так же можете удалить записи из таблицы в ручную
-- для этого нужно перейти на вкладку 'структура', поставить галочку в поле выбрать все
-- и нажать удалить
-----------------------------------

========================================
-- Выборка данных из таблицы базы данных
========================================

----------------------------------------
-- Не смотря на всю неприхотливость языка, у него все же есть правила на порядок записи команд
-- SELECT  FROM - всегда идет первым
-- WHERE - условия записываеться сразу после команд вывода
-- ORDER BY -  идет за условием
-- DESC - всегда после ORDER BY или же WHERE
-- LIMIT - всегда в конце записи 
----------------------------------------

SELECT * FROM  users; -- выводим данные из таблицы (звездочка означает что мы обращаемся ко всем данным таблицы)

SELECT `name`, `date` FROM  users; -- выводим поля `name` и `date` из таблицы users

SELECT `name`, `date` FROM  users
WHERE id > 3 AND id < 5; -- вывод полей `name` и `date` из записи с id 4;
-- обратите внимание на то что здесь я использовал оператор AND (и) который объединил условия вывода

SELECT * FROM users 
WHERE id <> 5; -- вывод всех записей, кроме записи с id 5;

-- IS NULL проверка записи на пустоту (пустое поле).
-- Если поле пустое, проверка сработает;
SELECT * FROM users
WHERE date IS NULL; -- выводим записи у каторых поле date пустое

-- IS NOT NULL провера записи на пустоту (пустое поле)ю
-- Если поле не пустое, проверка сработает
SELECT * FROM users
WHERE date IS NOT NULL; -- выводим все записи у которых поле date не равно пустоте

-- DISTINCT не выводит повторяющиеся записи
SELECT DISTINCT id FROM users; -- выводим все записи в столбце id, кроме повторяющихся

-- LIMIT указывает сколько записей нужно вывести.
-- Первый параметр (цифра) говорит с какой записи начать вывод.
-- Второй параметр (цифра) говорит сколько записей выводить.
-- Если первый параметр не указан, вывод происходит от первой записи
-- Всегда записываеться в конце.
SELECT * FROM users 
LIMIT 2, 3; -- выводим трех записи начиная со второй из таблицы users;

-- ORDER BY делает сортировку в порядке возрастания
SELECT * FROM users 
ORDER BY date 
LIMIT 5; -- выводим все записи от меньшей к большему, отсортировав по полю date
-- обратите внимание на то что LIMIT лимит имеет всего один прамметр (цифру)
-- это значит что будут выведены записи с первой по пятую

-- DESC переворачивает наш вывод в обратную сторану
SELECT * FROM users 
ORDER BY date DESC 
LIMIT 5; -- выводим все записи от большей к меньшей, отсортировав по полю date

-- BETWEEN(2 AND 6) выбирает записи от и до.
-- (2, 6) означает что мы выбрали все записи от 2 и до 6 включительно
SELECT * FROM users
WHERE id BETWEEN(2 AND 6); -- выводим все записи от 2 до 6 (включительно) по полю id;


-- IN(4, 2, 3, 7) указывает записи по конкретным параметрам
SELECT * FROM users
WHERE id IN(4, 2, 3, 7); -- выводим все записи с id 4, 2, 5, 7

-- LIKE 'Иван' выбирает все поля у которых значение соответствует параметру ('Иван')
-- знак % говорит о том что дельнейшие символы не входят в проверку
-- если % указан в начале ("%ван") то мы говорим что мы хотим найти параметр в конце текста
-- если % указан в начале и в конце ('%ва%') то мы хотим найти наш параметр в любом месте текста
SELECT * FROM users
WHERE name LIKE 'И%'; -- выбираем записи в которых в поле name первая буква И

=============================================
-- Создание и работа с индексами
=============================================

-------------------------------------------
-- индексы позволяют искать поля на много быстрее
-- используються для поиска на сайте
-- индексы не видны пользывателю
-- отображаеться как ключ
-------------------------------------------

-- Nindex - название нашего индекса, может быть любым
-- ON указывает в каким полем мы работаем.
-- ON users(name) - говорим  что мы работаем в таблице users, с полем name
CREATE INDEX Nindex ON users(name); -- добовляем индекс Nindex в столбец name в таблице users

DROP INDEX Nindex ON users; -- удаляем индекс Nindex из таблицы users

+++++++++++++++++++++++++++++++++++++
-- создаем таблицу с ссылками на другую таблицу, с помощью индексов
+++++++++++++++++++++++++++++++++++++

CREATE TABLE shop (
    id INT NOT NULL AUTO_INCREMENT,
    price INT,
    title varchar(100),
    date_time DATETIME DEFAULT CURRENT_TIMESTAMP,

    FOREIGN KEY (id) REFERENCES users(id) -- задаем одинаковый индекс полю id в таблице shop и полю id в таблице users
)

=================================================
-- объединение данных из разных таблиц
=================================================

-- INNER JOIN объединяет таблицы в вертуальной среде. Хрен знает почему, но LEFT JOIN лично у меня не работает, можете объеденять через него
-- INNER JOIN объединяет только те данные с которыми мы работаем
SELECT users.name, shop.price FROM users
INNER JOIN shop ON users.id = shop.id; -- выводим поля name из таблицы users и поля prise из таблицы shop если id записей совпадают

==================================================
-- Псевдонимы, функции и Group By
==================================================

-- AS задает псевдоним полям
SELECT name AS "Имя" FROM users; -- выводим поле name  из таблицы users. столбик name будет называться "Имя"

-- CONCAT(name, date) - объединяет записи в столбцах, используеться с псевдонимом
SELECT CONCAT("Пользователь ", name, " был добавлен: " date) AS "group" 
FROM users; -- выводим два поля объединив их в одно. Обратите внимание на то что в CONCAT я так же добавил текст, это не будет ошибкой и запишиться в нашу новую запись
-- AS "group" (псевдоним) - наш столбец бедет называться "group"

-------------------------------------------------

-- COUNT считает количество записей в столбце
SELECT COUNT(id) FROM users; -- выводим количиство записей (цифру) в столбце id

-- MIN ищет минимальное значение
SELECT MIN(price) FROM shop; -- выводим минимальное значение в столбце price таблицы shop;

-- MAX ищет максимальное значение
SELECT MAX(price) FROM shop; -- выводим максимальное значение в столбце price таблицы shop;

-- AVG считает среднее арефметическое число
SELECT AVG(price) FROM shop; -- выводим среднее арефметическое число всех записей столбца price таблице shop;

-- SUM считает сумму всех записей
SELECT SUM(price) FROM shop; -- выводим сумму всех записей в столбце price таблицы shop;

-- UCASE переводит все символы в верхний регистр
SELECT UCASE(name) FROM users; -- выводим все записи столбца name в верхнем регистре;

-- LCASE переводит все символы в нижний регистр
SELECT LCASE(name) FROM users; -- выводим все записи столбца name в нижнем регистре;
